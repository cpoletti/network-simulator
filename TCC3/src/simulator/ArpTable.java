/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package simulator;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.ResourceBundle;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Cristiano
 */
public class ArpTable extends javax.swing.JInternalFrame {

    HashMap<String, ArrayList<String>> workHask = new HashMap<String, ArrayList<String>>();
    ArrayList<String> ipList = new ArrayList<String>();

    /**
     * Creates new form ArpTable
     */
    public ArpTable() {
        initComponents();
        translate();
    }

    /**
     * Add a new workstation in the ARP Table
     *
     * @param ip the workstation IP
     * @param mac the workstation MAC
     * @param port the workstation connection port socket
     */
    public void addWorkStation(String ip, String mac, int port) {
        ArrayList<String> portList;

        //Gets the JTable's model
        DefaultTableModel model = (DefaultTableModel) jtArpTable.getModel();

        if (!workHask.containsKey(ip)) {
            //saves the workstation in a hash and store the different ports that were added
            portList = new ArrayList<String>();
            portList.add(port + "");
            workHask.put(ip, portList);
            ipList.add(ip);

            //adds the station in the JTable
            model.addRow(new String[]{ip, mac});
        } else {
            portList = workHask.get(ip);
            portList.add(port + "");
        }
    }

    /**
     * Remove a workstation from the ARP Table
     *
     * @param ip the workstation IP
     * @param port the workstation connection port socket
     */
    public void removeWorkStation(String ip, int port) {
        ArrayList<String> portList;
        if (workHask.containsKey(ip)) {
            portList = workHask.get(ip);
            if (portList.contains(port + "")) {
                portList.remove(port + "");
                if (portList.isEmpty()) {
                    int index = ipList.indexOf(ip);
                    DefaultTableModel model = (DefaultTableModel) jtArpTable.getModel();
                    model.removeRow(index);
                    workHask.remove(ip);
                    ipList.remove(index);
                }
            }
        }
    }

    /**
     * Translate the Frame texts
     */
    public final void translate() {
        ResourceBundle bundle = Config.getInstance().getBundle();

        this.setTitle(bundle.getString("ArpTable.title"));
        DefaultTableModel model = (DefaultTableModel) jtArpTable.getModel();
        model.setColumnIdentifiers(new String[]{bundle.getString("ArpTable.table.ip"), bundle.getString("ArpTable.table.mac")});

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtArpTable = new javax.swing.JTable();

        setTitle("Tabela ARP");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jtArpTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Endereço IP", "Endereço MAC"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtArpTable);
        jtArpTable.getColumnModel().getColumn(0).setResizable(false);
        jtArpTable.getColumnModel().getColumn(1).setResizable(false);

        getContentPane().add(jScrollPane1);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtArpTable;
    // End of variables declaration//GEN-END:variables
}
