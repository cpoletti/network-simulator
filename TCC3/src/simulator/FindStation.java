/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package simulator;

import java.io.IOException;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;

/**
 *
 * @author Cristiano
 */
public final class FindStation extends javax.swing.JFrame {

    private static boolean run = true;
    private static WorkStation ws;

    /**
     * Creates new form FindStation
     */
    public FindStation() {
        initComponents();
        translate();
        this.setAlwaysOnTop(true);
    }

    /**
     * Sets the current Workstation
     *
     * @param ws the current Workstation
     */
    public void setWorkStation(WorkStation ws) {
        FindStation.ws = ws;
    }

    /**
     * Starts the thread to search new workstations
     */
    public void startThread() {
        run = true;
        FindStation.FindNewStationTread myFindNewStationTread = new FindStation.FindNewStationTread(this.jlFindStations);
        Thread mythread = new Thread(myFindNewStationTread);
        mythread.start();
        this.setResizable(false);
    }

    private class FindNewStationTread implements Runnable {

        JLabel label;

        public FindNewStationTread(JLabel label) {
            this.label = label;
        }

        public void run() {
            try {
                int count = 0;
                String dots = ".";
                MultiCastClient client = new MultiCastClient();

                while (run) {
                    
                    //create a String with many dots.
                    if (count == 0) {
                        dots = ".";
                    } else {
                        dots += ".";
                    }
                    label.setText(Config.getInstance().getBundle().getString("FindStation.jlFindStations.text") + dots);

                    count++;

                    if (count == 4) {
                        count = 0;
                    }

                    //sends the informations of the current workstation
                    client.sendMessage(ws.getbytes(), 0);
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {

                        //debug error
                        System.out.println(ex.toString());
                        Logger.getLogger(FindStation.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                
                //disconnect the socket
                client.disconnect();
            } catch (IOException ex) {

                //debug error
                System.out.println(ex.toString());
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * Translate the Frame texts
     */
    public void translate() {
        ResourceBundle bundle = Config.getInstance().getBundle();

        this.setTitle(bundle.getString("FindStation.title"));
        jbStop.setText(bundle.getString("FindStation.jbStop.text"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlFindStations = new javax.swing.JLabel();
        jbStop = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(310, 125));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                onCloseWindow(evt);
            }
        });

        jlFindStations.setText("Procurando estações.");

        jbStop.setText("Parar");
        jbStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopSearching(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(jlFindStations))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addComponent(jbStop)))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jlFindStations)
                .addGap(18, 18, 18)
                .addComponent(jbStop)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void stopSearching(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopSearching
        // TODO add your handling code here:

        //stop the thread
        run = false;
        this.dispose();
    }//GEN-LAST:event_stopSearching

    private void onCloseWindow(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_onCloseWindow
        // TODO add your handling code here:

        //stop the thread
        run = false;
    }//GEN-LAST:event_onCloseWindow

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;


                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FindStation.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FindStation.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FindStation.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FindStation.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FindStation().setVisible(true);
            }
        });

        MultiCastClient client;
        try {
            client = new MultiCastClient();
            while (run) {
                client.sendMessage(ws.getbytes(), 0);
                try {
                    Thread.sleep(2000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(FindStation.class
                            .getName()).log(Level.SEVERE, null, ex);
                }

            }
        } catch (IOException ex) {
            Logger.getLogger(FindStation.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbStop;
    private javax.swing.JLabel jlFindStations;
    // End of variables declaration//GEN-END:variables
}
